#!/usr/bin/env bash

local_branch="$(git rev-parse --abbrev-ref HEAD)"

# branch for module specific work
# begin with name of module
# then the type of changes made by the branch
# then a first sequence of characters
# then an optional sequence of dash followed by characters
module_regex="^(ihm|data|network)\/(feature|bugfix)\/[a-zA-Z0-9]+((-[a-zA-Z0-9]+)+)?$"

# release branch
release_regex="^release\/[0-9].[0-9]$"

message=$'Désolé ! Ton commit n\'est pas passé car ta branche est mal nommée. Tu as deux formats possibles :
  - branche propre à ton module : <module>/feature|bugfix/objectif-de-ta-branche. Ex : ihm/feature/new-music-view
  - branche de release : release/<version>. Ex : release/1.0

Voici comment renommer ta branche :
1) Tu lui donnes un nouveau nom correct :
$ git branch -m new-name
2) Tu refais ton commit : cette-fois ci il va passer.
3) Tu supprimes la branche distante, qui a l\'ancien nom, et tu push ta branche locale, qui a le nouveau nom :
$ git push origin :old-name new-name
4) Ta branche locale est toujours basée sur l\'ancienne branche distante, que tu viens de supprimer. Il faut donc la lier à la nouvelle branche distante :
$ git push origin -u new-name

Merci !

PS1 : si ta branche était déjà liée à une merge-request, elle a été fermée à l\'étape 3, quand tu as supprimé l\'ancienne branche distante. Il te faut en rouvrir une depuis la nouvelle branche.
PS2 : si tu as une bonne raison de garder ton nom de branche, tu peux faire ton commit avec l\'option --no-verify.'

if [[ ! $local_branch =~ $module_regex &&  ! $local_branch =~ $release_regex ]]
then
    echo "$message"
    exit 1
fi

exit 0
